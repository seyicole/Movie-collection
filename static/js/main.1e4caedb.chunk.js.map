{"version":3,"sources":["components/elements/Header/Header.js","components/elements/NotFound/NotFound.js","config.js","components/elements/HeroImage/HeroImage.js","components/elements/SearchBar/SearchBar.js","components/elements/FourColGrid/FourColGrid.js","components/elements/MovieThumb/MovieThumb.js","components/elements/LoadMoreBtn/LoadMoreBtn.js","components/elements/Spinner/Spinner.js","components/Home/Home.js","components/elements/Navigation/Navigation.js","components/elements/MovieInfo/MovieInfo.js","helpers.js","components/elements/MovieInfoBar/MovieInfoBar.js","components/elements/Actor/Actor.js","components/Movie/Movie.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","className","to","src","alt","NotFound","API_URL","API_KEY","IMAGE_BASE_URL","HeroImage","props","style","background","image","title","text","SearchBar","state","value","timeout","doSearch","e","setState","target","clearTimeout","setTimeout","callback","name","size","type","placeholder","onChange","this","Component","FourColGrid","header","loading","children","map","element","i","key","MovieThumb","clickable","pathname","movieId","movieName","LoadMoreBtn","onClick","Spinner","Home","movies","heroImage","currentPage","totalPages","searchTerm","searchItems","console","log","endpoint","fetchItems","loadMoreItems","fetch","then","result","json","results","page","total_pages","backdrop_path","original_title","overview","poster_path","id","Navigation","movie","MovieInfo","min","max","optimum","low","high","vote_average","directors","length","convertMoney","money","Intl","NumberFormat","currency","minimumFractionDigits","format","MovieInfoBar","time","hours","Math","floor","mins","calcTime","budget","revenue","Actor","actor","profile_path","character","Movie","actors","match","params","status_code","crew","filter","member","job","cast","catch","error","location","runtime","App","Fragment","path","component","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1e4caedb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Header.css';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"rmdb-header\">\r\n            <div className=\"rmdb-header-content\">\r\n                <Link to='/'>\r\n                    <img className=\"rmdb-logo\" src=\"./images/reactMovie_logo.png\" alt=\"rmdb-logo\" />\r\n                    <img className=\"rmdb-tmdb-logo\" src=\"./images/tmdb_logo.png\" alt=\"tmdb-logo\" />\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst NotFound =() => {\r\n    return (\r\n        <div>\r\n            <h1>Ooooooops!  This page doesn't exist</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","// Configuration for TMDB\n// To se the latest configuration fetch it from https://api.themoviedb.org/3/configuration?api_key=019e8f375549e0bbd4a4191862ebc88f\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '019e8f375549e0bbd4a4191862ebc88f';\n\n// Images\n// An image URL looks like this example:\n// http://image.tmdb.org/t/p/w780/bOGkgRGdhrBYJSLpXaxhXVstddV.jpg\n\nconst IMAGE_BASE_URL ='http://image.tmdb.org/t/p/';\n\n//Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w500';\n\nexport {\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE\n}","import React from 'react';\r\nimport './HeroImage.css';\r\n\r\nconst HeroImage = (props) => {\r\n    return (\r\n        <div className=\"rmdb-heroimage\"\r\n            style={{\r\n                background:\r\n                `linear-gradient(to bottom, rgba(0,0,0,0)\r\n                39%,rgba(0,0,0,0)\r\n                41%,rgba(0,0,0,0.95)\r\n                100%\r\n                ),\r\n                url('${props.image}'), #1c1c1c `\r\n               \r\n            }}\r\n        >\r\n            <div className=\"rmdb-heroimage-content\">\r\n                <div className=\"rmdb-heroimage-text\">\r\n                    <h1>{props.title}</h1>\r\n                    <p>{props.text}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroImage;","import React, {Component} from 'react';\r\nimport FontAwesome  from 'react-fontawesome';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    timeout = null;\r\n\r\n    doSearch = (e) => {\r\n        this.setState({value: e.target.value})\r\n        clearTimeout(this.timeout)\r\n\r\n        this.timeout = setTimeout(()=>{\r\n            this.props.callback(this.state.value)\r\n        }, 500) //this function to be used in d searchbar component\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"rmdb-searchbar\">\r\n                <div className=\"rmdb-searchbar-content\">\r\n                    <FontAwesome className=\"rmdb-fa-search\" name=\"search\" size=\"2x\" />\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"rmdb-searchbar-input\"\r\n                        placeholder=\"Search\"\r\n                        onChange={this.doSearch}\r\n                        value={this.state.value}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './FourColGrid.css';\r\n\r\nconst FourColGrid = (props) => {\r\n    const renderElements = () => {\r\n        // sending in d thumbnails as children\r\n        const gridElements = props.children.map((element, i) => {\r\n            return (\r\n                <div key={i} className=\"rmdb-grid-element\">\r\n                    {element}\r\n                </div>\r\n            )\r\n        })\r\n        return gridElements;\r\n    }\r\n\r\n    return(\r\n        <div className=\"rmdb-grid\">\r\n            {/* if header present n noth loading anything display h1 header else show nothing */}\r\n            {props.header && !props.loading ? <h1>{props.header}</h1> : null}\r\n            <div className=\"rmdb-grid-content\">\r\n                {/* show thumbnails(movie photos) */}\r\n                {renderElements()} \r\n            </div> \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default FourColGrid;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './MovieThumb.css';\r\n\r\nconst MovieThumb = (props) => {\r\n    return(\r\n        <div className=\"rmdb-moviethumb\">\r\n            {/* theres a prop called clickable - set it to be true/false if u want it clickable */}\r\n            {props.clickable ?\r\n            // double curly braces becaus its an object bin created\r\n            <Link to={{pathname: `/${props.movieId}`, movieName: `${props.movieName}`}}>\r\n                <img src={props.image} alt=\"moviethumb\" />\r\n               \r\n            </Link>\r\n            :\r\n            <img src={props.image} alt=\"moviethumb\" />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieThumb;","import React from 'react';\r\nimport './LoadMoreBtn.css';\r\n\r\nconst LoadMoreBtn = (props) => {\r\n    return(\r\n        <div className=\"rmdb-loadmorebtn\" onClick={props.onClick}>\r\n          <p>{props.text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadMoreBtn;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return(\r\n        <div className=\"loader\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport {API_URL, API_KEY, IMAGE_BASE_URL, BACKDROP_SIZE, POSTER_SIZE} from '../../config';\r\nimport HeroImage from '../elements/HeroImage/HeroImage';\r\nimport SearchBar from '../elements/SearchBar/SearchBar';\r\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\r\nimport MovieThumb from '../elements/MovieThumb/MovieThumb';\r\nimport LoadMoreBtn from '../elements/LoadMoreBtn/LoadMoreBtn';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Home.css';\r\n// import { render } from '@testing-library/react';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        movies: [],\r\n        heroImage: null,\r\n        loading: false,\r\n        currentPage: 0,\r\n        totalPages: 0,\r\n        searchTerm: ''\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({loading: true});\r\n        const endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n        this.fetchItems(endpoint)\r\n    }\r\n    //to be sent to searchBar component\r\n    searchItems = (searchTerm) => {\r\n        console.log(searchTerm)\r\n// 2 endpoints first- if not searching for anything or user deletes its search it should go back to original state and show movies\r\n        let endpoint = '';\r\n        this.setState({\r\n            movies: [], //if searching let d movies to clear and just show that what was searched for\r\n            loading: true, //show loading spinner\r\n            searchTerm \r\n        })\r\n        if(searchTerm === ''){\r\n            // if search is empty lod popular movies\r\n            endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n        }else{\r\n            endpoint = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchTerm}`\r\n        }\r\n         this.fetchItems(endpoint)   \r\n    }\r\n\r\n    //method for loadmore items\r\n    loadMoreItems = () => {\r\n        //two endpoints needed coz when searching should show more searched movies if not load popular movies\r\n        let endpoint = '';\r\n        this.setState({loading: true});\r\n        if(this.state.searchTerm === ''){\r\n            endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${this.state.currentPage + 1}`;\r\n        }else{\r\n            endpoint = `${API_URL}search/movie?api_key${API_KEY}&language=en-US&query=${this.state.searchTerm}&page=${this.state.currentPage + 1}`;\r\n        }\r\n        //call the fetch item method which will fetch d next page on d loadmorebtn\r\n        this.fetchItems(endpoint)\r\n        console.log(endpoint)\r\n    }\r\n   \r\n\r\n    //building the first method\r\n    fetchItems = (endpoint) => {\r\n        fetch(endpoint)\r\n        .then(result => result.json())\r\n        .then(result => {\r\n            console.log(result)\r\n            this.setState({\r\n                movies: [...this.state.movies, ...result.results],  // keep old movies whiles loading new movies on page(appending old movies to new movies)\r\n                heroImage: this.state.heroImage || result.results[0],  // if heroimage is null(doesnt exist) replace with first image from movie result\r\n                loading: false, //because we're not fetching more data\r\n                currentPage: result.page,\r\n                totalPages: result.total_pages\r\n            })\r\n            \r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"rmdb.home\">\r\n                \r\n                {this.state.heroImage ? //check if heroImage exist otherwise retun nothin\r\n                <div>\r\n                    <HeroImage \r\n                        image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${this.state.heroImage.backdrop_path}`}\r\n                        title={this.state.heroImage.original_title}\r\n                        text={this.state.heroImage.overview}\r\n                    />\r\n                    <SearchBar callback={this.searchItems}/>\r\n                </div> : null }\r\n               <div className=\" rmdb-home-grid\">\r\n                   {/* select a header based of if doing search or showing ppl movi */}\r\n                    <FourColGrid\r\n                        header={this.state.searchTerm ? 'Search Result' : 'Popular Movies'}\r\n                        // show loding if loading or not\r\n                        loading={this.state.loading} \r\n                        \r\n                    >\r\n                    {this.state.movies.map((element, i) => {\r\n                        return <MovieThumb\r\n                                    key={i}\r\n                                    // clickble enables a user to click on an img n go to the movi detail page\r\n                                    clickable={true} \r\n                                    image={element.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${element.poster_path}` : './images/no_image.jpg'}\r\n                                    // movi id for accesing individual moviz\r\n                                    movieId={element.id}\r\n                                    movieName={element.original_title}\r\n                                />\r\n                    })}\r\n                    {/* fourColgrid has closing tag bcos children(moviThumb) are been passed into it */}\r\n                    </FourColGrid> \r\n                    {/* when to show loadmorebtn and spinner */}\r\n                    {this.state.loading ? <Spinner /> : null}\r\n                    {(this.state.currentPage <= this.state.totalPages && !this.state.loading) ?\r\n                    <LoadMoreBtn text=\"Load More\" onClick={this.loadMoreItems} /> : null\r\n                    }\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = (props) => {\r\n    return (\r\n            <div className=\"rmdb-navigation\">\r\n                <div className=\"rmdb-navigation-content\">\r\n                    <Link to=\"/\">\r\n                        <p>Home</p>\r\n                    </Link>\r\n                    <p>/</p>\r\n                    <p>{props.movie}</p>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport {IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE} from '../../../config';\r\nimport Fontawesome from 'react-fontawesome';\r\nimport MovieThumb from '../MovieThumb/MovieThumb';\r\nimport './MovieInfo.css';\r\n\r\n\r\nconst MovieInfo = (props) => {\r\n    return ( \r\n        // if movie image is not present show black background\r\n        <div className=\"rmdb-movieinfo\"\r\n           style={{ \r\n               background: props.movie.backdrop_path ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${props.movie.backdrop_path}')` : '#000'\r\n           }}\r\n        >\r\n            <div className=\"rmdb-movieinfo-content\">\r\n                <div className=\"rmdb-movieinfo-thumb\">\r\n                    <MovieThumb \r\n                        image={props.movie.poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${props.movie.poster_path}` : './images/no_image.jpg'}\r\n                        // used curly braces on the false coz its in javascript\r\n                        clickable={false}\r\n                    />\r\n                    <div className=\"rmdb-movieinfo-text\">\r\n                        <h1>{props.movie.title}</h1>\r\n                        <h3>PLOT</h3>\r\n                        <p>{props.movie.overview}</p>\r\n                        <h3>RMDB RATING</h3>\r\n                        <div className=\"rmdb-rating\">\r\n                            <meter min=\"0\" max=\"100\" optimum=\"100\" low=\"40\" high=\"70\" value={props.movie.vote_average * 10}></meter>\r\n                            <p className=\"rmdb-score\">{props.movie.vote_average}</p>\r\n                        </div>\r\n                        {props.directors.length > 1 ? <h3>DIRECTORS</h3> : <h3>DIRECTOR</h3>}\r\n                        {/* create elementes for each director */}\r\n                        {props.directors.map((element, i) => {\r\n                            return <p key={i} className=\"rmdb-director\">{element.name}</p>\r\n                        })}\r\n                    </div>\r\n                    <Fontawesome className=\"fa-film\" name=\"film\" size=\"5x\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieInfo;","// Convert time to hours and minutes\nexport const calcTime = (time) => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n}\n\n// Convert a number to $ format\nexport const convertMoney = (money) => {\n  var formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n}","import React from 'react';\r\nimport Fontawesome from 'react-fontawesome';\r\nimport {calcTime, convertMoney} from '../../../helpers';\r\n// import MovieInfo from '../MovieInfo/MovieInfo';\r\nimport './MovieInfoBar.css';\r\n\r\n\r\nconst MovieInfoBar = (props) =>{\r\n    return (\r\n        <div className=\"rmdb-movieinfobar\">\r\n           <div className=\"rmdb-movieinfobar-content\">\r\n            <div className=\"rmdb-movieinfobar-content-col\">\r\n                <Fontawesome className=\"fa-time\" name=\"clock-o\" size=\"2x\" />\r\n                <span className=\"rmdb-movieinfobar-info\">Running time: {calcTime(props.time)}</span>\r\n            </div>\r\n            <div className=\"rmdb-movieinfobar-content-col\">\r\n                <Fontawesome className=\"fa-budget\" name=\"money\" size=\"2x\" />\r\n                <span className=\"rmdb-movieinfobar-info\">Budget: {convertMoney(props.budget)}</span>\r\n            </div>\r\n            <div className=\"rmdb-movieinfobar-content-col\">\r\n                <Fontawesome className=\"fa-revenue\" name=\"ticket\" size=\"2x\" />\r\n                <span className=\"rmdb-movieinfobar-info\">Revenue: {convertMoney(props.revenue)}</span>\r\n            </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieInfoBar;","import React from 'react';\r\nimport {IMAGE_BASE_URL} from '../../../config';\r\nimport './Actor.css';\r\n\r\nconst Actor = (props) => {\r\n    // override poster size\r\n    const POSTER_SIZE = \"w154\";\r\n\r\n    return (\r\n        <div className=\"rmdb-actor\">\r\n            <img \r\n                src={props.actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${props.actor.profile_path}` : './images/no_images.jpg'}\r\n                alt=\"actorthumb\"\r\n            />\r\n            <span className=\"rmdb-actor-name\">{props.actor.name}</span>\r\n            <span className=\"rmdb-actor-character\">{props.actor.character}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Actor;","import React, {Component} from 'react';\r\nimport {API_URL, API_KEY} from '../../config';\r\nimport Navigation from '../elements/Navigation/Navigation';\r\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\r\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\r\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\r\nimport Actor from '../elements/Actor/Actor';\r\nimport Spinner from '../elements/Spinner/Spinner';\r\nimport './Movie.css'\r\n\r\nclass Movie extends Component {\r\n    state = {\r\n        // properties we need\r\n        movie: null,\r\n        actors: null,\r\n        directors: [],\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({loading: true})\r\n        // first fetch movies...\r\n        // we created a movie variable in d v=browser router which enables us get access to this movie id expression\r\n        const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\r\n        this.fetchItems(endpoint)\r\n    }\r\n\r\n    fetchItems (endpoint) {\r\n        fetch(endpoint)\r\n        .then(result => result.json())\r\n        .then(result => {\r\n            console.log(result)\r\n            if(result.status_code){\r\n                this.setState({loading: false})\r\n            }else{\r\n                // if theres a movie display it. \r\n                // inother to grab d actors setState also accepts a callback function so can call a function after setState is set inother to  grab d movie befor grabing d actors\r\n                this.setState({movie: result}, () => {\r\n                    // ... fetch actors in the setState callback function\r\n                    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\r\n                    fetch(endpoint)\r\n                    .then(result => result.json())\r\n                    .then(result => {\r\n                        const directors = result.crew.filter((member) => member.job === 'Director')\r\n                        this.setState({\r\n                            actors: result.cast,\r\n                            directors,\r\n                            loading: false \r\n                        })\r\n                    })\r\n                })\r\n            }\r\n        })\r\n        .catch(e => console.error('Error:', e))\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"rmdb-movie\">\r\n               {this.state.movie ? \r\n                    <div>\r\n                        <Navigation movie={this.props.location.movieName} />\r\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors} />\r\n                        <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\r\n                    </div>\r\n                : null }\r\n                {/* seperate tenary operator coz we want to show d movie info b4 loading d actors */}\r\n                {this.state.actors ?\r\n                    <div className=\"rmdb-movie-grid\">\r\n                        <FourColGrid  header={'Actors'}>\r\n                        {/* for each actor in d array we create an actor element n send it to d FourColgrid */}\r\n                       \r\n                        {this.state.actors.map((element, i) => {\r\n                            return <Actor key={i} actor={element} />\r\n                        })}\r\n                        </FourColGrid>\r\n                    </div>\r\n                    : null }\r\n                    {/* if we dont v actors n not loading anything(no movie) return page not found */}\r\n                    {!this.state.actors && !this.state.loading ? <h1>No Movie Found!</h1> : null}\r\n                    {this.state.loading ? <Spinner /> : null}\r\n                }\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Header from '../elements/Header/Header';\nimport NotFound from '../elements/NotFound/NotFound';\nimport Home from '../Home/Home';\nimport Movie from '../Movie/Movie';\n// import './App.css';\n\nconst  App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <React.Fragment>\n            <Header />\n            <Switch>\n              <Route path='/' component={Home} exact />\n              <Route path='/:movieId' component={Movie} exact />\n              <Route component={NotFound} />\n            </Switch>\n        </React.Fragment>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}